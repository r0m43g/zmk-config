/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "behaviors.dtsi"

/ {
keymap {
  compatible = "zmk,keymap";

  default_layer {
    label = "BASE";
    // -----------------------------------------------------------------------------------------
    // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
    // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
    // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
    //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
    bindings = <
      &kp TAB   &kp Q      &kp W       &hm LALT E &kp R       &kp T   &kp Y &kp U        &hm RALT I &kp O       &kp P    &kp BSPC
      &kp AT    &hm LGUI A &hm LCTRL S &kp D      &hm LSHFT F &kp G   &kp H &hm RSHFT J  &kp K      &hm LCTRL L &kp SEMI &kp SQT
      &kp MINUS &kp Z      &kp X       &kp C      &kp V       &kp B   &kp N &kp M        &kp COMMA  &kp DOT     &kp FSLH &kp EXCL
      &kp ESC &mo 2 &lt 1 SPACE   &kp SPACE &mo 3 &kp RET
    >;
  };

  sym_layer {
    // SYM layer -----------------------------------------------------------------------------
    // | TAB |  !  |  @  |  #  |  $  |  %  |---|  ^  |  &  |  *  |  (  |  )  | BSPC |
    // | @   |  ?  |  "  |     |  :  |  \  |---|  _  |  -  |  +  |  =  |  ;  | '    |
    // | -   |  <  |  {  |  }  |  >  | '|' |---|  `  |  ~  |  ,  |  .  |  /  | !    |
    //                   |     |     |     |---|     |     |     |
    label = "SYM";
    bindings = <
      &kp TAB   &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp BSPC
      &kp AT    &kp QMARK  &kp DQT    &trans     &kp COLON  &kp BSLH      &kp UNDER  &kp MINUS  &kp PLUS   &kp EQUAL  &kp SEMI   &kp SQT
      &kp MINUS &kp LT     &kp LBRC   &kp RBRC   &kp GT     &kp PIPE      &kp GRAVE  &kp TILDE  &kp COMMA  &kp DOT    &kp FSLH   &kp EXCL
      &trans     &trans     &trans        &trans     &trans     &trans
    >;
  };

  nav_layer {
    // NAV layer --------------------------------------------------------------------------------
    // | TAB | EN | LT | RU |RAT|C_I|---|C_LFT |PGDN  |PGUP  |C_RGT |    |BSPC|
    // |CAPS |C_A |WS_S|    |C_R|C_U|---| LFT  | DWN  | UP   | RGT  |HOME|END |
    // | DEL |C_Z |C_X |C_C |C_V|C_B|---|CS_LFT|S_HOME|S_END |CS_RGT|INS |DEL |
    //        |   |    |   |-----------------|   |   |   |
    label = "NAV";
    bindings = <
      &kp TAB   &switch_en &switch_lt    &switch_ru &switch_rat &kp LC(I)     &kp LC(LEFT)     &kp PG_DN    &kp PG_UP   &kp LC(RIGHT)     &trans   &kp BSPC
      &kp CAPS  &kp LC(A)  &kp LG(LS(S)) &trans     &kp LC(R)   &kp LC(U)     &kp LEFT         &kp DOWN     &kp UP      &kp RIGHT         &kp HOME &kp END
      &kp DEL   &kp LC(Z)  &kp LC(X)     &kp LC(C)  &kp LC(V)   &kp LC(B)     &kp LC(LS(LEFT)) &kp LS(HOME) &kp LS(END) &kp LC(LS(RIGHT)) &kp INS  &kp DEL
      &trans    &trans    &trans        &trans    &trans    &trans
    >;
  };

  fn_layer {
    // FN layer -------------------------------------------------------------------------------
    // | F1   | F2  | F3  | F4  | F5  | F6  |---|  0  |  7  |  8  |  9  |  *  |  /   |
    // | F7   | F8  | F9  | F10 | F11 | F12 |---|  0  |  4  |  5  |  6  |  -  |  =   |
    // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |---|  0  |  1  |  2  |  3  |  +  |  .   |
    //                 | LCTRL | NUM |     |---|    |     |     |
    label = "FN";
    bindings = <
      &kp F1     &kp F2       &kp F3       &kp F4       &kp F5       &kp F6        &kp KP_N0  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MULTIPLY &kp KP_DIVIDE
      &kp F7     &kp F8       &kp F9       &kp F10      &kp F11      &kp F12       &kp KP_N0  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS    &kp KP_EQUAL
      &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_PLUS     &kp KP_DOT
      &kp LCTRL  &kp KP_NLCK &trans       &trans     &trans     &trans
    >;
  };
} 
